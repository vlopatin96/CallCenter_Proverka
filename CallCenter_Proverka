using namespace System.Net
# Input bindings are passed in via param block.
param($Request, $TriggerMetadata)

# Write to the Azure Functions log stream.
Write-Host "PowerShell HTTP trigger function processed a request."

# Interact with query parameters or the body of the request.
$name = $Request.Query.Name
if ($null -eq $name) {
    $name = $Request.Body.Name
}

Write-Host $name
if ($null -ne $name) {
    #$status = [HttpStatusCode]::OK
    Import-Module "C:\Users\Master\Desktop\PSHTML.psd1"
    #Pyrus Token############################################################################################################
    $security_key = "KRi4HRM8Yu1VNAJuhbot86nv37t3yHRaBIllXqhweTzZii718GCtlNM2DG4Uf4E6~H8SZE4bhDC2ExaOUX3yvi4PohSLA6KT"
    $login = "bot@228d58e5-e0a2-4ddb-a1b5-c7394f883bb9"
    $uri = "https://api.pyrus.com/v4/auth?login=$($login)&security_key=$($security_key)"
    $access_token = (Invoke-RestMethod -uri $uri).access_token
    $headersPyrus = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
    $headersPyrus.Add("Authorization","Bearer $($access_token)")
    $headersPyrus.Add("Content-Type", "application/json;charset=utf-8")
  
    #$name = "79052708603"
    ########################################################
    $tasksarray=@()
    $Date = (get-date).AddDays(-5).ToString("yyyy-MM-dd")
    
    $att_cc =New-Object -TypeName PSObject -Property @{
        "fld1" = "gt$($date)"        
        "fld222"    = $name
        "include_archived" = "y"
        } | ConvertTo-Json
   
    $Tasks_cc   =  Invoke-RestMethod -Method post -Uri "https://api.pyrus.com/v4/forms/522023/register" -Body $att_cc -Headers $headerspyrus
   

if ($null -ne $Tasks_cc.tasks){
    foreach ($task_obj in $Tasks_cc.tasks){
        #Канал обращения
        $TicketChannels = (($task_obj.fields| where-object {$_.id -eq 13}).value).choice_id
        #Детали обращения
        $DetailTask = ($task_obj.fields | where-object {$_.id -eq 202}).value
        if($DetailTask.cells.Count -gt 2){
        $ProblemsArray = ($DetailTask | ForEach-Object {$_.cells} | Where-Object {$_.id -eq 203}).value | ForEach-Object {$_.values[0]}
        $ProblemsArray.Count
        $n=0
        $text=@()
        do {
            
            $text += $ProblemsArray[$n] + ", "

            $n++
        }
        Until ($ProblemsArray.Count -eq $text.count)
        }
        elseif($DetailTask.cells.Count -eq 2 -or $DetailTask.cells.Count -ne 0){
            $DetailTask = ($task_obj.fields | where-object {$_.id -eq 202}).value
            $ProblemsArray = (($DetailTask | ForEach-Object {$_.cells} | Where-Object {$_.id -eq 203}).value | ForEach-Object {$_.values})[0]
            $ProblemsArray.Count
            $n=0
            $text=@()
        do {
            
            $text += $ProblemsArray

            $n++
        }
        Until ($ProblemsArray.Count -eq $text.count)

        }
        else {
            $text = "Детали обращения не заполнены"
        }
        
        
        
        
        # Этап тикета
        $CurrentStep = $task_obj.current_step
        If ($CurrentStep -eq 2 -or $CurrentStep -eq 4){

            $status = "Ожидает обработки"
        }
        elseif (($CurrentStep -eq 3 -or $CurrentStep -eq 5) -and $nulll -eq $task_obj.close_date) {
            
            $status = "В работе"  
        }
        elseif ($CurrentStep -eq 6 -and $nulll -eq $task_obj.close_date) {
            
            $status = "Отправлен на пиццерию"  
        }
        elseif (($CurrentStep -eq 3 -or $CurrentStep -eq 5 -or $CurrentStep -eq 6) -and $nulll -ne $task_obj.close_date) {
            
            $status = "Закрыт\решён"  
        }       
        

       # }
        #если отзыв из МП - берем оценку для ифчика
        if($TicketChannels -eq "13"){
        $Rating = ((($task_obj.fields| where-object {$_.id -eq 13}).value).fields | where-object {$_.id -eq 142}).value
        }
        if($TicketChannels -ne "13"){
        $task_base = $task_obj
        $task_fields = $task_obj.fields
            
            
        $out = New-Object -TypeName PSObject -Property @{
            "Date"           = $task_base.create_date.AddHours(3).ToString("dd.MM.yyyy HH:mm:ss")
            "task"           = $task_base.id
            "OrderNumber"    = ($task_fields | Where-Object {$_.id -eq 284}).value
            "ClientName"     = ($task_fields | Where-Object {$_.id -eq 5}).Value
            "Pizzeria"       = ($task_fields | Where-Object {$_.id -eq 198}).Value.values[1]
            "Channel"        = ($task_fields | Where-Object {$_.id -eq 13}).Value.choice_names | Out-String -Stream
            "Problems"       = $text
            "Status"         = $Status
            "Solved"         = ($task_fields | Where-Object {$_.id -eq 134}).Value.choice_names | Out-String -Stream
            "details"        = ($task_fields | Where-Object {$_.id -eq 214}).Value
           
            
            

        } | ConvertTo-Json
       
        $tasksarray += $out

        }
    elseif ($TicketChannels -eq "13" -and $Rating -ne "5") {
           
            $task_base = $task_obj 
            $task_fields = $task_obj.fields
            $task_fields_mob = ($task_fields | Where-Object {$_.id -eq 13}).Value.fields 
            
       

            
            $out = New-Object -TypeName PSObject -Property @{
                "Date"           = $task_base.create_date.AddHours(3).ToString("dd.MM.yyyy HH:mm:ss")
                "task"           = $task_base.id
                "OrderNumber"    = ($task_fields | Where-Object {$_.id -eq 284}).Value
                "ClientName"     = ($task_fields | Where-Object {$_.id -eq 5}).Value
                "Pizzeria"       = ($task_fields | Where-Object {$_.id -eq 198}).Value.values[1]
                "Channel"        = ($task_fields | Where-Object {$_.id -eq 13}).Value.choice_names | Out-String -Stream
                "Problems"       = $text
                "Status"         = $Status
                "Solved"         = ($task_fields | Where-Object {$_.id -eq 134}).Value.choice_names | Out-String -Stream
                "details"        = ($task_fields | Where-Object {$_.id -eq 214}).Value
                
    
            } | ConvertTo-Json 
            $tasksarray += $out
    
        }
    else{

           
            Write-Host "пропускаем"
           


        }
        
        

       # $tasksarray += $out

        } 
    }

        
        $array = $tasksarray | Select-Object  -Unique #уникальные тикеты
        
        #$body = $out ################################################################################
        $body = html -Content {
            head -Content {
                Title -Content "Dodo Contact Center"
                Link -href 'https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css' -rel stylesheet
                script -src 'https://code.jquery.com/jquery-3.2.1.slim.min.js'
                script -src 'https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js'
                script -src 'https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js'
            }
            Body -Content {
                Div -Class 'container' -Content {
                    Div -Class 'jumbotron' -Content {
                        H1 -Class 'display-4' -Content "Dodo Contact Center"
                    }
                }
                
                Div -Class 'container' -Content {
                    $employees = $array | ConvertFrom-Json
                    Table -Style 'font-size: 12px' -class 'table' -Content {
                        Thead -Content {
                            Th -Content "Дата"
                            Th -Content "Тикет"
                            Th -Content "Номер заказа"
                            Th -Content "Имя клиента"
                            Th -Content "Пиццерия"
                            Th -Content "Канал обращения"
                            Th -Content "Проблемы"
                            Th -Content "Статус"
                            Th -Content "Решение"
                            Th -Content "Комментарий"

                                                       
                            
                        }
                        Tbody -Content {
                            foreach ($employee in $employees)
                            {
                                tr  -Content {
                                    td -Content $employee.Date
                                    td -Content $("<a target=""_blank"" href=https://pyrus.com/?id=$($employee.task)><span>$($employee.task)</span></a>")
                                    td -Content $employee.OrderNumber
                                    td -Content $employee.ClientName
                                    td -Content $employee.Pizzeria
                                    td -Content $employee.Channel
                                    td -Content $employee.Problems
                                    td -Content $employee.Status
                                    td -Content $employee.Solved
                                    td -Style 'word-break: break-all' -Class 'word' $employee.details
                                                              
                                    
                                }
                            }
                        }
                    }
                }
            }
        }


    
            
    
    
    
    }
      

else {
    $status = [HttpStatusCode]::BadRequest
    $body = "Please pass a name on the query string or in the request body."
}

# Associate values to output bindings by calling 'Push-OutputBinding'.
Push-OutputBinding -Name Response -Value ([HttpResponseContext]@{
    headers    = @{'content-type' = 'text/html' }
    StatusCode = [httpstatuscode]::OK
    Body       = $body
})
